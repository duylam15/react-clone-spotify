// Import bi·ªÉu t∆∞·ª£ng `LibraryBig` t·ª´ th∆∞ vi·ªán `lucide-react` ƒë·ªÉ hi·ªÉn th·ªã icon th∆∞ vi·ªán l·ªõn.
import { LibraryBig } from 'lucide-react'

// Import `ScrollArea` - m·ªôt component h·ªó tr·ª£ cu·ªôn n·ªôi dung trong UI.
import { ScrollArea } from '@/components/ui/scroll-area'

// Import `TooltipWrapper` - component hi·ªÉn th·ªã tooltip khi hover v√†o ph·∫ßn t·ª≠.
import TooltipWrapper from '@/components/ui/tooltip-wrapper'

// Import h√†m `getIconSize` ƒë·ªÉ l·∫•y k√≠ch th∆∞·ªõc icon.
import getIconSize from '@/utils/get-icon-size'

// Import `LibraryCard` - component hi·ªÉn th·ªã th√¥ng tin m·ªôt th∆∞ vi·ªán c·ª• th·ªÉ.
import LibraryCard from './library-card/library-card'
import { useEffect, useState } from 'react'
import axios from 'axios'
import { Playlist } from '@/types/types'
import { useNavigate } from 'react-router-dom'
import { useRefresh } from '@/contexts/RefreshContext'

// Danh s√°ch c√°c th∆∞ vi·ªán nh·∫°c c√≥ s·∫µn trong sideba


// ƒê·ªãnh nghƒ©a component `SidebarLibraryExplorer`, hi·ªÉn th·ªã th∆∞ vi·ªán nh·∫°c trong sidebar.
export default function SidebarLibraryExplorer() {
  const [playlists, setPlaylists] = useState([])
  const API_BASE_URL = "http://127.0.0.1:8000" // C·∫•u h√¨nh API base URL
  const navigate = useNavigate()
  const { refreshTrigger, refresh } = useRefresh(); // L·∫•y gi√° tr·ªã t·ª´ context
  const userId = Number(localStorage.getItem("idLogin"))

  useEffect(() => {
    const fetchPlaylist = async () => {
      try {
        const response = await axios.get(`${API_BASE_URL}/danhsachphat/nguoidung/${userId}/`)
        setPlaylists(response.data) // C·∫≠p nh·∫≠t state
      } catch (err: any) {
        console.error("Error fetching playlist:", err)
      }
    }
    fetchPlaylist()
  }, [refreshTrigger]) // üî• Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  console.log("playlistsplxxxaylistsplaylists", playlists)

  return (
    // Container ch√≠nh c·ªßa sidebar v·ªõi c√°c thu·ªôc t√≠nh ki·ªÉu d√°ng.
    <ScrollArea className="flex scroll-pt-2 flex-col overflow-hidden">

      <div className="flex w-full flex-col items-start justify-start  overflow-hidden rounded-lg bg-s-red-darkest  text-white">
        {/* Khu v·ª±c hi·ªÉn th·ªã danh s√°ch th∆∞ vi·ªán, c√≥ h·ªó tr·ª£ cu·ªôn khi danh s√°ch d√†i */}
        {/* Duy·ªát danh s√°ch `libraries` v√† render m·ªói th∆∞ vi·ªán b·∫±ng `LibraryCard` */}
        {playlists?.map((playlist: any) => (
          <div >
            <LibraryCard
              isPinned={false} // M·∫∑c ƒë·ªãnh th∆∞ vi·ªán ch∆∞a ƒë∆∞·ª£c ghim.
              key={playlist.ten_danh_sach} // S·ª≠ d·ª•ng `name` l√†m key ƒë·ªÉ tr√°nh l·ªói React.
              playlist={playlist} // Truy·ªÅn d·ªØ li·ªáu th∆∞ vi·ªán v√†o `LibraryCard`.
            />
          </div>
        ))}
      </div >
    </ScrollArea>
  )
}
