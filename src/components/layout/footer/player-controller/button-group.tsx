// Import c√°c icon t·ª´ th∆∞ vi·ªán lucide-react ƒë·ªÉ s·ª≠ d·ª•ng trong giao di·ªán ƒëi·ªÅu khi·ªÉn nh·∫°c
import { PauseIcon, PlayIcon, Repeat1Icon, RepeatIcon, ShuffleIcon, SkipBackIcon, SkipForwardIcon } from 'lucide-react'

import _ from "lodash";

// Import c√°c hooks c·ªßa React ƒë·ªÉ s·ª≠ d·ª•ng state v√† callback t·ªëi ∆∞u
import { useCallback, useEffect, useRef, useState } from 'react'

// Import c√°c component UI t√πy ch·ªânh ƒë·ªÉ s·ª≠ d·ª•ng l√†m n√∫t ƒëi·ªÅu khi·ªÉn
import ControlButton from '@/components/ui/control-button'
import ControlSwitch from '@/components/ui/control-switch'

// Import hook ƒë·ªÉ l·∫•y tr·∫°ng th√°i v√† h√†nh ƒë·ªông t·ª´ store qu·∫£n l√Ω tr√¨nh ph√°t nh·∫°c
import { usePlayerControllerStore } from '@/features/playerControllerStore'
import { useDispatch, useSelector } from 'react-redux'
import { RootState } from '@/stores/playlist'
import { setCurrentSong, togglePlayPause } from '@/stores/playlist/playerSlice'

// ƒê·ªãnh nghƒ©a component ButtonGroup, c√≥ nhi·ªám v·ª• hi·ªÉn th·ªã c√°c n√∫t ƒëi·ªÅu khi·ªÉn nh·∫°c
export default function ButtonGroup(): React.ReactNode {
  // L·∫•y tr·∫°ng th√°i v√† h√†nh ƒë·ªông t·ª´ store
  const { isRepeat, isShuffle, toggleRepeat, toggleShuffle } = usePlayerControllerStore((state) => ({
    isRepeat: state.isRepeat, // Tr·∫°ng th√°i l·∫∑p (one/all/none)
    isShuffle: state.isShuffle, // Tr·∫°ng th√°i ph√°t ng·∫´u nhi√™n (true/false)
    toggleRepeat: state.toggleRepeat, // H√†m chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô l·∫∑p
    toggleShuffle: state.toggleShuffle, // H√†m chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô ng·∫´u nhi√™n
  }))

  console.log("isRepeat, , , ", isRepeat,)
  console.log(", isShuffle, , ", isShuffle)

  // State ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i ph√°t/d·ª´ng nh·∫°c
  const dispatch = useDispatch();
  console.log("setCurrentSongsetCurrentSongsetCurrentSongsetCurrentSong", setCurrentSong)
  const { currentSong, isPaused } = useSelector((state: RootState) => state.player);
  console.log("isPaused", isPaused)
  const audioPlayer: HTMLAudioElement | null = document.querySelector<HTMLAudioElement>('#audio-player');

  useEffect(() => {
    if (audioPlayer?.paused) {
      audioPlayer.play();
    }
  }, [currentSong]);

  console.log("currentSongcurrentSongcurrentSongcurrentSong", currentSong?.bai_hat_id)

  // H√†m x·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t Play/Pause
  const onClickPlay = useCallback(() => {
    if (!audioPlayer) {
      return
    } // N·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ audio th√¨ d·ª´ng
    console.log("audioPlayeraudioPlayeraudioPlayer", audioPlayer)
    console.log("audioPlayeraudioPlayer", audioPlayer?.paused)
    if (audioPlayer.paused) {
      void audioPlayer.play()
    }// N·∫øu nh·∫°c ƒëang d·ª´ng th√¨ ph√°t
    else void audioPlayer.pause() // N·∫øu nh·∫°c ƒëang ph√°t th√¨ d·ª´ng
    dispatch(togglePlayPause());
  }, [audioPlayer])

  const listAudio: any = useSelector((state: RootState) => state.songs.songs);
  console.log("songssongssongssongssongssongsxxxx", listAudio)


  const [shuffledList, setShuffledList] = useState([...listAudio]);
  const [currentIndex, setCurrentIndex] = useState<number>(0);


  console.log("currentIndexcurrentIndex", currentIndex)

  let currentShuffledId: number = shuffledList.find(song => song?.bai_hat_id === currentSong?.bai_hat_id)?.idShuffledList;



  console.log("xxxxxxxxxx22", currentShuffledId);

  const shuffleArray = (array: any) => {
    let shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  const onShuffle = () => {
    toggleShuffle(); // ƒê·∫£o tr·∫°ng th√°i shuffle trong Zustand

    if (!isShuffle) {
      const newList = shuffleArray(listAudio).map((song, index) => ({
        ...song,
        idShuffledList: index, // G√°n idShuffledList t·ª´ 0 ƒë·∫øn length - 1
      }));
      setShuffledList(newList);
      setCurrentIndex(0); // Reset v·ªÅ b√†i ƒë·∫ßu ti√™n
    } else {
      const originalList = listAudio.map((song: any, index: any) => ({
        ...song,
        idShuffledList: index, // ƒê·∫∑t l·∫°i idShuffledList theo danh s√°ch g·ªëc
      }));
      setShuffledList(originalList);
      setCurrentIndex(0);
    }
  };

  console.log("shuffledListshuffledListshuffledListshuffledList", shuffledList)


  useEffect(() => {
    if (currentSong?.bai_hat_id !== undefined) {
      setCurrentIndex(currentSong.bai_hat_id - 1);
    }
  }, [currentSong]); // C·∫≠p nh·∫≠t currentIndex khi currentSong thay ƒë·ªïi

  console.log("currentSongcurrentSongcurrentSongcurrentSong", currentSong?.bai_hat_id);
  console.log("currentSongcurrentSongcurrentSongcurrentSong", currentIndex);

  const playAudio = (bai_hat_id: number) => {
    const audioPlayer = document.querySelector<HTMLAudioElement>("#audio-player");
    console.log("aaaaaaaaaa")
    if (!audioPlayer) return;

    console.log("üîé Danh s√°ch shuffledList:", shuffledList);
    console.log("songssoxxxxngssongssongssongssongsxxxx", listAudio);
    console.log("bai_hat_idbxxai_hat_id", bai_hat_id);

    console.log("bai_hat_idb√†i", shuffledList[bai_hat_id])
    dispatch(setCurrentSong(shuffledList[bai_hat_id]))
    // T√¨m v·ªã tr√≠ c·ªßa b√†i h√°t trong shuffledList
    const songIndex = shuffledList.findIndex(song => song?.bai_hat_id === bai_hat_id);
    console.log("üî¢ K·∫øt qu·∫£ t√¨m ki·∫øm index:", songIndex);

    setCurrentIndex(shuffledList[bai_hat_id]?.bai_hat_id)
    console.log("bai_hat_idbai_hat_idbai_hat_id", shuffledList[bai_hat_id]?.bai_hat_id)
    console.log("currentSongcurrentSoxxxxngcurrentSongcurrentSong", currentSong)

    // C·∫≠p nh·∫≠t currentIndex v√† ph√°t b√†i h√°t
    console.log("isShuffleisShuffleisShuffle", isShuffle)
    console.log("isShuffleisShuffleisShuffle", listAudio)
    if (isShuffle) {
      audioPlayer.src = shuffledList[bai_hat_id]?.duong_dan;
    }
    audioPlayer.load();
    audioPlayer.play();
  };


  const playAudioNoShuffle = (bai_hat_id: number, listAudio: any) => {
    if (!listAudio || listAudio.length === 0) {
      console.log("‚ö† listAudio ch∆∞a c√≥ d·ªØ li·ªáu, ch·ªù t·∫£i...");
      return;
    }

    console.log("bai_hat_idxxxbai_hat_id", bai_hat_id)

    const audioPlayer = document.querySelector<HTMLAudioElement>("#audio-player");
    if (!audioPlayer) return;

    console.log("üé∂ listAudio c√≥ d·ªØ li·ªáu:", listAudio[bai_hat_id]);
    dispatch(setCurrentSong(listAudio[bai_hat_id]))

    audioPlayer.src = listAudio[bai_hat_id]?.duong_dan;
    audioPlayer.load();
    audioPlayer.play();
  };

  const onPrevious = useCallback((listAudio: any, currentIndex: any) => {
    if (isShuffle) {
      playAudio(currentShuffledId - 1);
      currentShuffledId -= 1;
    } else {
      playAudioNoShuffle(currentIndex - 1, listAudio);
      setCurrentIndex(currentIndex - 1);
    }
  }, [isShuffle, currentShuffledId]);

  useEffect(() => {
    const audioPlayer = document.querySelector<HTMLAudioElement>("#audio-player");
    const stateRepeat = usePlayerControllerStore.getState().isRepeat;

    if (!audioPlayer) return;

    if (stateRepeat === "one") {
      console.log("ƒê√£ b·∫≠t Repeat One");
      // L·∫Øng nghe s·ª± ki·ªán khi b√†i h√°t k·∫øt th√∫c
      audioPlayer.onended = () => {
        audioPlayer.currentTime = 0; // Quay l·∫°i ƒë·∫ßu b√†i
        audioPlayer.play(); // Ph√°t l·∫°i b√†i h√°t
      };
    } else if (stateRepeat === "all") {
      console.log("ƒê√£ b·∫≠t Repeat All");

      audioPlayer.onended = () => {
        const nextIndex = currentIndex + 1;

        if (nextIndex < listAudio.length) {
          // N·∫øu ch∆∞a ph·∫£i b√†i cu·ªëi, ph√°t b√†i ti·∫øp theo
          onNext(listAudio, currentIndex);
        } else {
          if (isShuffle) {
            console.log("xxxxxxxx222xxxxx")
            console.log("xxxxxxxx222xxxxx", currentShuffledId)
            playAudio(0)
          } else {
            playAudioNoShuffle(0, listAudio);
            setCurrentIndex(0);
          }
        }
      };
    } else {
      // Khi b√†i h√°t k·∫øt th√∫c, t·ª± ƒë·ªông chuy·ªÉn sang b√†i ti·∫øp theo
      audioPlayer.onended = () => {
        console.log("üéµ B√†i h√°t ƒë√£ k·∫øt th√∫c, chuy·ªÉn sang b√†i ti·∫øp theo...");
        onNext(listAudio, currentIndex);
      };
    }

    // Cleanup: X√≥a s·ª± ki·ªán khi component unmount ho·∫∑c `currentSong` thay ƒë·ªïi
    return () => {
      audioPlayer.onended = null;
    };
  }, [currentSong, listAudio, currentIndex, isShuffle, isRepeat]);


  const onNext = useCallback((listAudio: any, currentIndex: any) => {
    console.log("aaaaaaaaa")
    console.log("listAudio", listAudio)

    if (isShuffle) {
      playAudio(currentShuffledId + 1);
      currentShuffledId += 1;

    } else {
      console.log("listAudio", listAudio)
      console.log("currentIndexcurrentIndexcurrentIndexxxx", currentIndex)
      playAudioNoShuffle(currentIndex + 1, listAudio);
      setCurrentIndex(currentIndex + 1);
    }
  }, [isShuffle, currentShuffledId]);


  // G√°n tr·ª±c ti·∫øp h√†m toggleRepeat v√†o onRepeat ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
  const onRepeat = useCallback(() => {
    toggleRepeat();
    const stateRepeat = usePlayerControllerStore.getState().isRepeat;
    const audioPlayer = document.querySelector<HTMLAudioElement>("#audio-player");

    if (!audioPlayer) return; // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y th·∫ª audio

    console.log("Tr·∫°ng th√°i Repeat:", stateRepeat);
    if (stateRepeat === "one") {
      console.log("ƒê√£ b·∫≠t Repeat One");

      // L·∫Øng nghe s·ª± ki·ªán khi b√†i h√°t k·∫øt th√∫c
      audioPlayer.onended = () => {
        audioPlayer.currentTime = 0; // Quay l·∫°i ƒë·∫ßu b√†i
        audioPlayer.play(); // Ph√°t l·∫°i b√†i h√°t
      };
    } else {
      // N·∫øu kh√¥ng ph·∫£i "one", x√≥a s·ª± ki·ªán `onended` ƒë·ªÉ kh√¥ng ph√°t l·∫°i
      audioPlayer.onended = null;
    }
  }, [toggleRepeat]);

  return (
    <div className="flex flex-row justify-center gap-3 pb-1">
      {/* N√∫t b·∫≠t/t·∫Øt ph√°t nh·∫°c ng·∫´u nhi√™n */}
      <ControlSwitch Icon={ShuffleIcon} size={17} onClick={onShuffle} switchControl={isShuffle} />

      {/* N√∫t quay l·∫°i b√†i h√°t tr∆∞·ªõc */}
      <ControlButton Icon={SkipBackIcon} onClick={() => onPrevious(listAudio, currentIndex)} button />

      {/* N√∫t Play/Pause */}
      <ControlButton
        Icon={isPaused ? PlayIcon : PauseIcon} // Hi·ªÉn th·ªã Play n·∫øu nh·∫°c ƒëang d·ª´ng, ng∆∞·ª£c l·∫°i hi·ªÉn th·ªã Pause
        className="bg-s-gray-lightest text-black transition-transform duration-100 hover:scale-105 active:scale-95"
        onClick={onClickPlay}
      />

      {/* N√∫t chuy·ªÉn b√†i h√°t ti·∫øp theo */}
      <ControlButton Icon={SkipForwardIcon} onClick={() => onNext(listAudio, currentIndex)} button />

      {/* N√∫t b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô l·∫∑p l·∫°i */}
      <ControlSwitch
        Icon={isRepeat === 'one' ? Repeat1Icon : RepeatIcon} // N·∫øu ƒëang l·∫∑p m·ªôt b√†i th√¨ hi·ªÉn th·ªã Repeat1Icon, ng∆∞·ª£c l·∫°i hi·ªÉn th·ªã RepeatIcon
        onClick={onRepeat}
        switchControl={isRepeat === 'one' || isRepeat === 'all'} // B·∫≠t n·∫øu ch·∫ø ƒë·ªô l·∫∑p l√† 'one' ho·∫∑c 'all'
      />
    </div>
  )
}


// T√≥m t·∫Øt ch·ª©c nƒÉng c·ªßa t·ª´ng ph·∫ßn:
// Qu·∫£n l√Ω tr·∫°ng th√°i tr√¨nh ph√°t nh·∫°c

// S·ª≠ d·ª•ng useState ƒë·ªÉ l∆∞u tr·∫°ng th√°i ph√°t / d·ª´ng nh·∫°c(isPaused).
// S·ª≠ d·ª•ng usePlayerControllerStore ƒë·ªÉ l·∫•y tr·∫°ng th√°i v√† thao t√°c l·∫∑p / ng·∫´u nhi√™n t·ª´ store.
// L·∫•y ph·∫ßn t·ª≠ < audio > t·ª´ DOM ƒë·ªÉ ƒëi·ªÅu khi·ªÉn ph√°t nh·∫°c.
// H√†m x·ª≠ l√Ω s·ª± ki·ªán

// onClickPlay: D·ª´ng ho·∫∑c ph√°t nh·∫°c khi nh·∫•n n√∫t.
//   onShuffle: Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô ph√°t ng·∫´u nhi√™n.
//     onRepeat: Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô l·∫∑p l·∫°i.
//       onPrevious: Chuy·ªÉn v·ªÅ b√†i h√°t tr∆∞·ªõc.
//         onNext: Chuy·ªÉn sang b√†i h√°t ti·∫øp theo.
// Giao di·ªán ƒëi·ªÅu khi·ªÉn

// G·ªìm c√°c n√∫t ph√°t / d·ª´ng, chuy·ªÉn b√†i, ch·∫ø ƒë·ªô ph√°t ng·∫´u nhi√™n, ch·∫ø ƒë·ªô l·∫∑p l·∫°i.
// C√°c n√∫t ƒë∆∞·ª£c thi·∫øt k·∫ø b·∫±ng c√°c component UI t√πy ch·ªânh(ControlButton, ControlSwitch).
// üî• T√≥m l·∫°i: ƒê√¢y l√† m·ªôt nh√≥m n√∫t ƒëi·ªÅu khi·ªÉn nh·∫°c v·ªõi t√≠nh nƒÉng ph√°t / d·ª´ng, chuy·ªÉn b√†i, l·∫∑p l·∫°i, ph√°t ng·∫´u nhi√™n, s·ª≠ d·ª•ng React hook ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i v√† t·ªëi ∆∞u hi·ªáu su·∫•t. üöÄ